TODO :

Profile display (use random data for now)

Color palette (Use to make buttons apparent, look for accessibility, contrast, UX etc)

Settings management
    !TEAM
        In-game or profile ?

Stats management
    !TEAM
        What do we keep and how do we keep it ?

Login/Register
    !BACKEND
        Register - Wait for email existence check
            If it exists, warn user
            If it doesn't, prompt user with "continue to login" message
        Login - Wait for tokens

Profile
    !BACKEND
        Retrieve picture, name, stats etc
        Change name ? -- Check if name is already chosen. (If option to change name, gotta check at register if the username before @ is already taken. If it is, handle that)

Game menus

    !ANTOINE
        Handle menu (init buttons)
            Send data to backend (in data struct)
        Handle "back button" while in-game (exit functions)

Handle errors (Ex: response.fail)

42 API

!For event listeners on submit buttons, not sure if "click" is ok or if it should be "submit"

!BACKEND

When a new user confirms their adress, set default username from email, default picture and password. 

Make sure the views have HTTPS URLS

Response status vs json content (Register) (Verify email existence)

BACK - FRONT COM

-> == frontend to backend
<- == backend to frontend

Exchange user data (register)
    ->  Email, password
    <- Email exists or not

    !When a new user registers, if email is already waiting for confirmation, override (password).

Exchange user data (login)
    -> Email, password
    <- Validity
    <- Tokens
    <- Profile (picture, username, game stats)

Leaderboard
    -> New game data
    <- total game data

Profile lookup (?)
    -> username
    <- validity
    <- Profile (picture, username, game stats)
