!If "back" button is used during endgame, it does not unload
!ctrl+ / ctrl- : fucks up game

!handle logout in-game

TODO Register
    ?Send data to backend
    ?Ask backend if email exists (if it does, prompt user and start again)
    Change modal colors

TODO Login
    ?Send data to backend
    ?Save token
    ?Change image and get info(fetch from backend)
    ?42 API (PKCE) - backend
    !click or sumbit ? (eventListeners)
    Change modal colors

TODO Profile
    Update profile every game end
    Update loggedUser every game end
    Match history
    User lookup
    Customization (ex: picture)
    Handle picture path (think of profile lookup)
    Change color when modal is active


TODO Menus
    

TODO Leaderboard
    Design it
    When exactly should it be updated ?

TODO Game management
    !Allow to play without loggin ? (as guests ?) Otherwise disable play buttons before logged in
    Data sent to backend (when and what)
    Customization (at user identification)
    Tournament design (who plays next)

TODO Game end
    Update loggedUser
    Send data to backend
    Update Leaderboard

TODO Design
    Make sure contrast is ok.
    Check for accessibility
    Go further with css (transform, transition...)

TODO Security
    What data should the access token protect ?

TODO Other
    How to avoid users running into any errors ? (handle "waiting for unpkg")
    Check if response.fail
    Cleanup files













Settings management
    !TEAM
        In-game or profile ?

Stats management
    !TEAM
        What do we keep and how do we keep it ?

Login/Register
    !BACKEND
        Register - Wait for email existence check
            If it exists, warn user
            If it doesn't, prompt user with "continue to login" message
        Login - Wait for tokens

Profile
    !BACKEND
        Retrieve picture, name, stats etc
        Change name ? -- Check if name is already chosen. (If option to change name, gotta check at register if the username before @ is already taken. If it is, handle that)

Game menus

    !ANTOINE
        Handle menu (init buttons)
            Send data to backend (in data struct)
        Handle "back button" while in-game (exit functions)

!For event listeners on submit buttons, not sure if "click" is ok or if it should be "submit"

!BACKEND

When a new user confirms their adress, set default username from email, default picture and password. 

Make sure the views have HTTPS URLS

Response status vs json content (Register) (Verify email existence)

BACK - FRONT COM

-> == frontend to backend
<- == backend to frontend

Exchange user data (register)
    ->  Email, password
    <- Email exists or not

    !When a new user registers, if email is already waiting for confirmation, override (password).

Exchange user data (login)
    -> Email, password
    <- Validity
    <- Tokens
    <- Profile (picture, username, game stats)

Leaderboard
    -> New game data
    <- total game data

Profile lookup (?)
    -> username
    <- validity
    <- Profile (picture, username, game stats)


OAuth Links
https://medium.com/@katelynvan152/simplifying-oauth-implementation-in-javascript-a-step-by-step-guide-15509b7919cf
https://auth0.com/docs/get-started/authentication-and-authorization-flow/authorization-code-flow-with-pkce
https://fusionauth.io/articles/oauth/modern-guide-to-oauth
https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST